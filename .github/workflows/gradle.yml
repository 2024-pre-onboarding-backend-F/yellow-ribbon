# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: JAVA CI with Gradle

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: make application-secret.yml
      run: |
        cd ./src/main/resources
        touch ./application-secret.yml
        echo "${{ secrets.APPLICATION_SECRET }}" > ./application-secret.yml

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Docker build and push
      env: 
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
      run: |
        echo $DOCKER_TOKEN | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build --no-cache -t app .
        docker tag app ${{ secrets.DOCKER_USERNAME }}/yellow-ribbon:$COMMIT_SHA
        docker push ${{ secrets.DOCKER_USERNAME }}/yellow-ribbon:$COMMIT_SHA

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/yellow-ribbon:$COMMIT_SHA
          sudo docker stop $(docker ps -q --filter "name=yellow-ribbon")
          sudo docker rm yellow-ribbon || true
          sudo docker run -d --name yellow-ribbon --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/yellow-ribbon:$COMMIT_SHA
          sudo docker image prune -a -f
